
#
# Copyright (c) 2014 Cloudera, Inc. All rights reserved.
#

#
# Sample AWS Cloudera Director configuration file based on the Cloudera AWS reference architecture:
# http://www.cloudera.com/content/cloudera/en/resources/library/whitepaper/cloudera-enterprise-reference-architecture-for-aws-deployments.html
#

#
# Cluster name
#

name: C5-Reference-AWS

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#

provider {
    type: aws

    #
    # Get AWS credentials from the OS environment
    # See http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html
    #
    # If specifying the access keys directly and not through variables, make sure to enclose
    # them in double quotes.

    #accessKeyId: ${?AWS_ACCESS_KEY_ID}
    #secretAccessKey: ${?AWS_SECRET_ACCESS_KEY}

    #
    # Whether to publish access keys. Default is false.
    # Publishing access keys to clients is necessary for those clients to have access to S3.
    # These keys are published in the configuration files of all HDFS clients.
    #

    publishAccessKeys: true

    #
    # ID of the Amazon AWS region to use
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
    #

    region: us-east-1

    #
    # Region endpoint (if you are using one of the Gov. regions)
    #

    # regionEndpoint: ec2.us-gov-west-1.amazonaws.com

    #
    # Name of the public key registered in AWS
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
    #

    keyName: richard-im-aws

    #
    # ID of the VPC subnet
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html
    #

    # For private subnet, use subnetId: subnet-b1de299a
    # For public subnet, use subnetId: subnet-b2de2999
    subnetId: subnet-b1de299a

    #
    # Comma separated list of security group IDs
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html
    #
    # Default security group

    securityGroupsIds: sg-534a5636

    #
    # A prefix that Cloudera Director should use when naming the instances (this is not part of the hostname)
    #

    instanceNamePrefix: cloudera-director-i-51329bb0

    #
    # Specify a size for the root volume (in GBs). Cloudera Director will automatically expand the
    # filesystem so that you can use all the available disk space for your application
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/storage_expand_partition.html
    #

    # rootVolumeSizeGB: 100 # defaults to 50 GB if not specified

    #
    # Specify the type of the EBS volume used for the root partition. Defaults to gp2
    # See: http://aws.amazon.com/ebs/details/
    #

    # rootVolumeType: gp2 # OR standard (for EBS magnetic)

    #
    # Whether to associate a public IP address with instances or not. If this is false
    # we expect instances to be able to access the internet using a NAT instance
    #
    # Currently the only way to get optimal S3 data transfer performance is to assign
    # public IP addresses to your instances and not use NAT instances (public subnet setup)
    #
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html
    #

    # associatePublicIpAddresses: true

}

#
# SSH credentials to use to connect to the instances
#

ssh {
    username: ec2-user # for RHEL image
    privateKey: privateKey-REPLACE-ME # with an absolute path to .pem file
}

#
# A list of instance types to use for group of nodes or management services
#

instances {

    i24 {
        type: i2.4xlarge   # requires an HVM AMI

        #
        # Amazon Machine Image (AMI)
        #
        # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html
        # Compatibility matrix: https://aws.amazon.com/amazon-linux-ami/instance-type-matrix/
        #
        # Red Hat Enterprise Linux AMI IDs: http://aws.amazon.com/partners/redhat/
        # We support Red Hat Enterprise Linux 6.4 (64bit) 64bit PV or HVM
        #

        image: ami-9d0b64f4

        #
        # Name of the IAM Role to use for this instance type
        # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
        #

        # iamProfileName: REPLACE-ME

        tags {
            owner: ${?USER}
        }

        bootstrapScript: """#!/bin/sh

# This is an embedded bootstrap script that runs as root and can be used to customize
# the instances immediately after boot and before any other Cloudera Director action

# If the exit code is not zero Cloudera Director will automatically retry

echo 'Hello World!'
exit 0

"""
    }

    hs18 {
        type: hs1.8xlarge  # can use both PV (paravirtualization) and HVM AMIs 
        image: ami-9d0b64f4

        tags {
            owner: ${?USER}
        }
    }

    m1l {
        type: m1.large  # requires a PV (paravirtualization) AMI
        image: ami-7d0c6314

        tags {
            owner: ${?USER}
        }
    }

    c38xl {
        type: c3.8xlarge  # can use both PV (paravirtualization) and HVM AMIs
        image: ami-9d0b64f4

        tags {
            owner: ${?USER}
        }
    }
}

#
# Configuration for Cloudera Manager. Cloudera Director can use an existing Cloudera Manager
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

    instance: ${instances.i24} {
        tags {
            # add any additional tags as needed
            application: "Cloudera Manager 5"
        }
    }

    #
    # Optional custom banner text for Cloudera Manager
    #

    # customBannerText: "Managed by Cloudera Director"

    #
    # Automatically activate 60-Day Cloudera Enterprise Trial
    #

    enableEnterpriseTrial: true

    #
    # Optional configuration for external databases (e.g. on RDS)
    # If not specified the embedded PostgreSQL database will be used
    #

    # databases {
    #     CLOUDERA_MANAGER: {
    #         type: postgresql
    #
    #         host: db.example.com
    #         port: 123
    #
    #         user: admin
    #         password: 1231ed
    #
    #         name: scm
    #     }
    #
    #     ACTIVITYMONITOR: { ... }
    #
    #     REPORTSMANAGER: { ... }
    #
    #     NAVIGATOR: { ... }
    # }

    #
    # Configuration to override package & parcel repositories
    #

    # repository: "http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/5/"
    # repositoryKeyUrl: "http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/RPM-GPG-KEY-cloudera"

    # parcelRepositories: "http://archive.cloudera.com/cdh5/parcels/latest/"

    # OR for CDH4:
    # parcelRepositories: "http://archive.cloudera.com/cdh4/parcels/latest/,http://archive.cloudera.com/impala/parcels/latest/,http://archive.cloudera.com/spark/parcels/latest/"

    # OR use an exist Cloudera Manager installation

    # hostname: "192.168.33.10"
    # username: <if not default 'admin'>
    # password: <if not default 'admin'>

}

#
# Cluster description
#

cluster {

    # List the products and their versions that need to be installed.
    # These products must have a corresponding parcel in the parcelRepositories
    # configured above. The specified version will be used to find a suitable
    # parcel. Specifying a version that points to more than one parcel among
    # those available will result in a configuration error. Specify more granular
    # versions to avoid conflicts.

    products {
      CDH: 5
    }

    #
    # OR for CDH4
    #
    # products {
    #   CDH: 4
    #   IMPALA: 1.3
    #   SPARK: 0.9
    # }

    services: [HDFS, YARN, ZOOKEEPER, HBASE, HIVE, HUE, OOZIE]

    #
    # Optional custom service configurations
    #
    # configs {
    #     HDFS {
    #       dfs_block_size: 1342177280
    #     }
    #
    #     MAPREDUCE {
    #       mapred_system_dir: /user/home
    #       mr_user_to_impersonate: mapred1
    #     }
    # }

    #
    # Optional external database configuration for Hive Metastore
    #

    # databases {
    #     HIVE: {
    #         type: postgresql
    #
    #         host: db.example.com
    #         port: 123
    #
    #         user: hive
    #         password: pass
    #
    #         name: hive_db
    #     }
    # }

    masters {
      count: 1

      instance: ${instances.i24} {
        tags {
          group: master
        }
      }

      roles {
        HDFS: ${roles.HDFS_MASTERS}
        YARN: ${roles.YARN_MASTERS}
        ZOOKEEPER: ${roles.ZOOKEEPER_MASTERS}
        HBASE: ${roles.HBASE_MASTERS}
        HIVE: ${roles.HIVE_MASTERS}
        HUE: ${roles.HUE_MASTERS}
        OOZIE: ${roles.OOZIE_MASTERS}
      }

      # Optional custom role configurations
      # configs {
      #   HDFS {
      #      NAMENODE {
      #        dfs_name_dir_list: /data/nn
      #        namenode_port: 1234
      #      }
      #   }
      # }
    }

    workers {
      count: 5
      #
      # Minimum number of instances required to set up the cluster.
      # Fail and quit if minCount number of instances is not available in this cloud
      # environment. Else, continue setting up the cluster.
      #
      minCount: 5

      instance: ${instances.c38xl} {

        # Put all cluster nodes in a placement group for improved network performance
        # Note: this only works for a limited set of instances
        # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html
	# Enable this for participate in a low-latency, 10 Gbps network (check for instance type support before enabling)

        # placementGroup: AWS-PLACEMENT-GROUP-us-east-1-11-11-2014

        tags {
          group: worker
        }
      }

      roles {
        HDFS: ${roles.HDFS_WORKERS}
        YARN: ${roles.YARN_WORKERS}
        HBASE: ${roles.HBASE_WORKERS}
      }

      # Optional custom role configurations

      # configs {
      #   HDFS {
      #     DATANODE {
      #        dfs_data_dir_list: /data/dn
      #      }
      #   }
      #   HBASE {
      #     REGIONSERVER {
      #       hbase_regionserver_java_heapsize: 4000000000
      #     }
      #   }
      # }
    }

    gateways {
      count: 1

      instance: ${instances.m1l} {
        tags {
          group: gateway
        }
      }

      roles {
        HIVE: [GATEWAY]
      }

      # Optional custom role configurations
      # configs {
      #   HIVE {
      #     GATEWAY {
      #       hive_metastore_timeout: 3000
      #       client_config_root_dir: /etc/hive
      #     }
      #   }
      # }
    }
}
